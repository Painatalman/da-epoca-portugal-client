{"version":3,"sources":["serviceWorker.ts","generated/graphql.tsx","features/products/slice.ts","components/FruitsInSeason/Theme.tsx","components/FruitsInSeason/Product.tsx","components/FruitsInSeason/FruitsInSeasonSection.tsx","components/FruitsInSeason/index.tsx","common/svg/apple.tsx","common/svg/broccoli.tsx","common/visuallyHiddenStyles.js","components/ProductTypeSelector.tsx","App.tsx","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ProductType","CacheControlScope","GetProductsInSeasonDocument","gql","initialState","products","type","Fruit","slice","createSlice","name","reducers","fetchProducts","state","action","payload","setType","actions","selectProducts","selectType","theme","colors","fruityOrange","veggieGreen","candyAppleRed","gray","grayDark","grayLight","white","fonts","default","fontSizes","xs","small","medium","large","spacing","1","2","3","4","5","6","Theme","children","Card","styled","article","props","Label","span","EndingLabel","NewLabel","ImageContainer","div","Product","product","className","inEndOfSeason","newInSeason","alt","src","photo","Section","section","LaunchList","useSelector","filterProducts","useCallback","filter","map","i","key","baseOptions","dispatch","useDispatch","Apollo","data","error","loading","getProductsInSeason","FruitsInSeasonSection","AppleSVG","width","height","viewBox","fill","d","SVG","css","Wrapper","Fieldset","fieldset","Legend","legend","visuallyHiddenStyles","Input","input","FruitLabel","label","VegetableLabel","LabelText","LeftLabelText","VegetableLabelText","Switch","SwitchIcon","Vegetable","id","value","onChange","checked","htmlFor","hidden","App","FruitsInSeason","ProductTypeSelector","rootReducer","combineReducers","productReducer","store","configureStore","reducer","client","ApolloClient","link","createHttpLink","uri","process","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a1c2d702.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** Number for a half of a month, from 1 to 24. Ex.: 3 = 1st half february, 20 = 2nd half of october */\n  HalfMonth: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport enum ProductType {\n  Fruit = 'FRUIT',\n  Vegetable = 'VEGETABLE'\n}\n\nexport type Product = {\n  __typename?: 'Product';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  name_en?: Maybe<Scalars['String']>;\n  photo?: Maybe<Scalars['String']>;\n  type: ProductType;\n  halfMonths: Array<Scalars['HalfMonth']>;\n  inEndOfSeason: Scalars['Boolean'];\n  newInSeason: Scalars['Boolean'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  products: Array<Product>;\n  getProductsInSeason: Array<Product>;\n  getProductSeasons: Array<Scalars['HalfMonth']>;\n  isInSeason: Scalars['Boolean'];\n};\n\n\nexport type QueryGetProductsInSeasonArgs = {\n  type?: Maybe<ProductType>;\n};\n\n\nexport type QueryGetProductSeasonsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryIsInSeasonArgs = {\n  productId: Scalars['ID'];\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type GetProductsInSeasonQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsInSeasonQuery = (\n  { __typename?: 'Query' }\n  & { getProductsInSeason: Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'name' | 'name_en' | 'type' | 'photo' | 'newInSeason' | 'inEndOfSeason'>\n  )> }\n);\n\n\nexport const GetProductsInSeasonDocument = gql`\n    query getProductsInSeason {\n  getProductsInSeason {\n    name\n    name_en\n    type\n    photo\n    newInSeason\n    inEndOfSeason\n  }\n}\n    `;\n\n/**\n * __useGetProductsInSeasonQuery__\n *\n * To run a query within a React component, call `useGetProductsInSeasonQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsInSeasonQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsInSeasonQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsInSeasonQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>) {\n        return Apollo.useQuery<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>(GetProductsInSeasonDocument, baseOptions);\n      }\nexport function useGetProductsInSeasonLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>(GetProductsInSeasonDocument, baseOptions);\n        }\nexport type GetProductsInSeasonQueryHookResult = ReturnType<typeof useGetProductsInSeasonQuery>;\nexport type GetProductsInSeasonLazyQueryHookResult = ReturnType<typeof useGetProductsInSeasonLazyQuery>;\nexport type GetProductsInSeasonQueryResult = Apollo.QueryResult<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>;","import { RootState } from \"../../store\";\nimport { PartialProduct } from \"./types\";\nimport { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ProductType } from \"generated/graphql\";\n\ntype State = {\n  products: PartialProduct[];\n  type: ProductType;\n};\n\nconst initialState: State = {\n  products: [],\n  type: ProductType.Fruit,\n};\n\nconst fetchProductsCaseReducer: CaseReducer<\n  State,\n  PayloadAction<PartialProduct[]>\n> = (state, action) => {\n  state.products = action.payload;\n};\n\nconst setTypeCaseReducer: CaseReducer<State, PayloadAction<ProductType>> = (\n  state,\n  action\n) => {\n  state.type = action.payload;\n};\n\nexport const slice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {\n    fetchProducts: fetchProductsCaseReducer,\n    setType: setTypeCaseReducer,\n  },\n});\n\nexport const { fetchProducts, setType } = slice.actions;\n\nexport const selectProducts = (state: RootState) => {\n  return state[slice.name].products;\n};\n\nexport const selectType = (state: RootState) => {\n  return state[slice.name].type;\n};\n\nexport default slice.reducer;\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nconst theme = {\n  colors: {\n    fruityOrange: \"#ED7014\",\n    veggieGreen: \"#457D00\",\n    candyAppleRed: \"#FF0800\",\n    gray: \"#707070\",\n    grayDark: \"#222222\",\n    grayLight: \"#BABABA\",\n    white: \"#FFFFFF\",\n  },\n  fonts: {\n    default: \"Fredoka One\",\n  },\n  fontSizes: {\n    xs: \"0.75rem\",\n    small: \"1rem\",\n    medium: \"1.25rem\",\n    large: \"2rem\",\n  },\n  spacing: {\n    1: \"0.5rem\",\n    2: \"1rem\",\n    3: \"1.5rem\",\n    4: \"2rem\",\n    5: \"2.5rem\",\n    6: \"3rem\",\n  },\n};\n\nexport type ThemeType = typeof theme;\n\nconst Theme = ({ children }: { children: React.ReactNode }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import * as React from \"react\";\n\nimport { PartialProduct } from \"../../features/products/types\";\nimport styled from \"styled-components\";\nimport Theme, { ThemeType } from \"./Theme\";\n\ntype ThemeProps = {\n  theme: ThemeType;\n};\n\ntype ProductProps = {\n  product: PartialProduct;\n};\n\nconst Card = styled.article`\n  position: relative;\n\n  font-size: ${(props: ThemeProps) => props.theme.fontSizes.medium};\n  font-family: Fredoka One;\n  text-align: center;\n\n  strong {\n    display: block;\n\n    text-transform: capitalize;\n    font-weight: normal;\n    height: 2em;\n    font-size: ${(props: ThemeProps) => props.theme.fontSizes.small};\n  }\n`;\n\nconst Label = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding: 0.2rem;\n  color: ${(props: ThemeProps) => props.theme.colors.white};\n  font-size: ${(props: ThemeProps) => props.theme.fontSizes.xs};\n  border-radius: 8px 8px 0 0;\n`;\n\nconst EndingLabel = styled(Label)`\n  background-color: ${(props: ThemeProps) => props.theme.colors.fruityOrange};\n`;\n\nconst NewLabel = styled(Label)`\n  background-color: ${(props: ThemeProps) => props.theme.colors.veggieGreen};\n`;\n\nconst ImageContainer = styled.div`\n  position: relative;\n  padding-bottom: 100%;\n  border-radius: 12px;\n\n  img {\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 100%;\n    border-radius: 8px;\n    object-fit: cover;\n  }\n\n  .in-end-of-season & {\n    border: 4px solid ${(props: ThemeProps) => props.theme.colors.fruityOrange};\n  }\n\n  .new-in-season & {\n    border: 4px solid ${(props: ThemeProps) => props.theme.colors.veggieGreen};\n  }\n`;\n\nconst Product: React.FC<ProductProps> = ({ product }) => {\n  return (\n    <Theme>\n      <Card\n        className={\n          product.inEndOfSeason\n            ? \"in-end-of-season\"\n            : product.newInSeason\n            ? \"new-in-season\"\n            : \"\"\n        }\n      >\n        <ImageContainer>\n          <img alt=\"\" src={product.photo || \"http://placehold.it/80/80\"} />\n        </ImageContainer>\n        {product.inEndOfSeason ? (\n          <EndingLabel>Fim de Época</EndingLabel>\n        ) : product.newInSeason ? (\n          <NewLabel>Início de Época</NewLabel>\n        ) : (\n          \"\"\n        )}\n        <strong>{product.name}</strong>\n      </Card>\n    </Theme>\n  );\n};\n\nexport default Product;\n","import React, { useCallback } from \"react\";\n\nimport { selectProducts, selectType } from \"../../features/products/slice\";\nimport { useSelector } from \"react-redux\";\nimport { PartialProduct } from \"../../features/products/types\";\nimport styled from \"styled-components\";\nimport Theme, { ThemeType } from \"./Theme\";\nimport Product from \"./Product\";\nimport { ProductType } from \"generated/graphql\";\n\ntype ThemeProps = {\n  theme: ThemeType;\n};\n\nconst Section = styled.section`\n  box-sizing: border-box;\n  margin: 0 auto 64px;\n  width: 100%;\n  min-width: 360px;\n  max-width: 480px;\n  padding: 0 ${(props: ThemeProps) => props.theme.spacing[2]};\n\n  font-size: ${(props: ThemeProps) => props.theme.fontSizes.medium};\n  font-family: Fredoka One;\n\n  ul {\n    list-style-type: none;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: ${(props: ThemeProps) => props.theme.spacing[3]};\n    padding: 0;\n  }\n\n  h1,\n  h2 {\n    font-weight: normal;\n    font-size: ${(props: ThemeProps) => props.theme.fontSizes.medium};\n  }\n`;\n\nconst LaunchList: React.FC = () => {\n  const products: PartialProduct[] = useSelector(selectProducts);\n  const type: ProductType = useSelector(selectType);\n\n  const filterProducts = useCallback(\n    () => products.filter((product) => product.type === type),\n    [products, type]\n  );\n\n  return (\n    <Theme>\n      <Section>\n        <h1>Produtos da Época</h1>\n        <ul>\n          {filterProducts().map((product, i) => (\n            <li key={i}>\n              <Product product={product} />\n            </li>\n          ))}\n        </ul>\n      </Section>\n    </Theme>\n  );\n};\n\nexport default LaunchList;\n","import React from \"react\";\n\nimport { useGetProductsInSeasonQuery } from \"../../generated/graphql\";\nimport FruitsInSeasonSection from \"./FruitsInSeasonSection\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchProducts } from \"../../features/products/slice\";\n\nexport default () => {\n  const dispatch = useDispatch();\n  const { data, error, loading } = useGetProductsInSeasonQuery();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error || !data) {\n    return <div>ERROR</div>;\n  }\n\n  dispatch(fetchProducts(data.getProductsInSeason));\n\n  return <FruitsInSeasonSection />;\n};\n","import * as React from \"react\";\n\nconst AppleSVG: React.FC = () => (\n  <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\">\n    <path\n      d=\"M27.4181 12.3151C30.6989 17.2364 22.4969 32 19.2161 32C15.9353 32 15.9353 30.3596 14.2949 30.3596C12.6545 30.3596 12.6545 32 9.37364 32C6.09283 32 -2.10919 17.2364 1.17162 12.3151C4.45243 7.39392 9.37364 7.39392 12.6545 9.03433V4.11311C3.43538 9.14915 1.35206 2.11182 1.35206 2.11182C1.35206 2.11182 5.71554 -3.77724 12.6545 4.11311V0.8323H15.9353V9.03433C19.2161 7.39392 24.1373 7.39392 27.4181 12.3151Z\"\n      fill=\"#222222\"\n    />\n  </svg>\n);\n\nexport default AppleSVG;\n","import * as React from \"react\";\n\nconst SVG: React.FC = () => (\n  <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\">\n    <path\n      d=\"M12.2925 30.1764C12.4405 30.4794 12.6913 30.8123 12.9578 31.0415C13.2835 31.3216 13.6893 31.5196 14.1188 31.6786C14.4187 31.7896 14.8149 31.8864 15.1353 31.9439C15.4674 32.0036 15.8751 32.0025 16.2595 31.9983C16.9423 31.9908 17.4813 31.9272 18.0896 31.7791C18.4729 31.6857 18.8369 31.582 19.1324 31.4657C19.6904 31.2462 20.0461 31.0024 20.1203 30.8443C20.0646 30.5829 19.977 30.1712 19.9118 29.8012C19.8536 29.4693 19.8053 29.1358 19.7669 28.8011C19.6833 28.0761 19.7263 27.566 19.8189 26.7227C19.9554 25.4806 20.2206 24.9148 20.6079 24.1767C20.9778 23.4717 21.5884 22.4864 22.0589 21.8517C22.5495 21.19 23.7777 19.8967 24.2257 19.4162C24.3819 19.4624 24.6837 19.5631 25.1504 19.6552C25.506 19.7254 25.9201 19.8091 26.4413 19.7915C27.682 19.7497 28.1337 19.5125 28.8554 19.0419C29.5103 18.6151 30.1369 17.7608 30.4649 16.9422C30.7172 16.3128 30.7948 15.6719 30.6851 14.9199C30.6112 14.414 30.4478 13.8149 30.3171 13.4188C30.175 12.9879 29.9519 12.5251 29.7646 12.1749C29.7646 12.1749 30.5178 11.2749 30.8193 10.5241C31.0788 9.87763 31.1998 9.04575 31.1478 8.52581C31.0939 7.98619 30.6359 6.99619 30.3479 6.64288C29.9686 6.17738 29.5978 5.69475 29.1293 5.31638C28.67 4.94538 28.1499 4.64175 27.6052 4.41419C27.0408 4.17844 26.3655 4.04194 25.8303 3.94794C25.7499 3.51919 25.6392 3.22025 25.3442 2.70438C24.9758 2.04188 24.5712 1.74263 23.9353 1.277C23.1462 0.699317 22.0464 0.10338 20.979 0.0217548C20.5191 -0.0133701 19.845 -0.0278701 18.9973 0.154442C18.2601 0.312942 17.5335 0.612442 16.981 0.894754C15.8716 0.46988 14.8352 0.53263 14.0176 0.754692C13.328 0.941879 13.1809 1.05425 12.55 1.4255C11.9306 1.69307 11.2578 2.31525 10.7368 3.03563C8.79608 3.09069 7.18064 3.77332 6.03052 4.426C4.72239 5.16838 3.54846 6.58738 3.08883 7.49C2.57583 8.49738 2.06346 9.92231 2.49633 12.126C-0.36254 13.8837 -0.0685406 16.6952 1.53865 18.2651C2.94815 19.642 5.28321 20.0709 7.49489 19.8479C8.15564 20.5177 10.6553 23.546 10.6553 23.546C10.6553 23.546 13.1731 26.3834 12.2925 30.1764ZM9.58008 18.4306C9.9222 18.0886 10.2155 17.5998 10.4435 17.2251C10.7023 17.2395 11.2338 17.2744 11.7565 17.2504C12.2805 17.2262 12.8358 17.1489 13.0578 17.0191C13.1201 17.206 13.5537 18.754 13.5812 19.7052C13.6173 20.9524 13.5826 21.1734 13.381 21.6112C13.2713 21.6631 13.1645 21.6857 13.0298 21.6373C12.55 21.4651 11.7505 20.8659 11.1772 20.3311C10.2894 19.5029 9.58008 18.4306 9.58008 18.4306ZM19.463 18.1672C19.4458 18.3187 19.4348 18.8625 19.508 19.3375C19.5824 19.8199 19.6555 20.2682 19.8374 20.4423C20.4768 20.3271 20.9233 19.9169 21.3092 19.6289C21.3092 19.6289 22.5617 18.651 22.8036 18.4264C22.6193 18.2594 22.3601 17.8677 22.268 17.6316C22.268 17.6316 21.3866 17.8897 20.943 17.9819C20.3844 18.1029 19.7279 18.1557 19.463 18.1672Z\"\n      fill=\"#222222\"\n    />\n  </svg>\n);\n\nexport default SVG;\n","import { css } from \"styled-components\";\n\nexport default css`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { selectType, setType } from \"../features/products/slice\";\nimport styled from \"styled-components\";\nimport Theme, { ThemeType } from \"./FruitsInSeason/Theme\";\nimport FruitSVG from \"../common/svg/apple\";\nimport VegetableSVG from \"../common/svg/broccoli\";\nimport visuallyHiddenStyles from \"common/visuallyHiddenStyles\";\nimport { ProductType } from \"generated/graphql\";\n\ntype ThemeProps = {\n  theme: ThemeType;\n};\n\nconst Wrapper = styled.div`\n  position: fixed;\n  padding: ${(props: ThemeProps) => props.theme.spacing[1]} 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  background-image: linear-gradient(to top, white 80%, rgba(255, 255, 255, 0));\n`;\n\nconst Fieldset = styled.fieldset`\n  border: none;\n  padding: 0;\n  margin: 0;\n`;\nconst Legend = styled.legend`\n  ${visuallyHiddenStyles}\n`;\n\nconst Input = styled.input`\n  ${visuallyHiddenStyles}\n`;\n\nconst FruitLabel = styled.label`\n  display: flex;\n  align-items: center;\n  z-index: 0;\n  cursor: pointer;\n\n  .has-selected-vegetables & {\n    z-index: 1;\n  }\n`;\n\nconst VegetableLabel = styled(FruitLabel)`\n  margin-left: -80px;\n  padding-left: calc(80px + 16px);\n  z-index: 1;\n\n  .has-selected-vegetables & {\n    z-index: 0;\n  }\n`;\n\nconst LabelText = styled.span`\n  font-family: ${(props: ThemeProps) => props.theme.fonts.default};\n`;\n\nconst LeftLabelText = styled(LabelText)`\n  color: ${(props: ThemeProps) => props.theme.colors.fruityOrange};\n  text-decoration: underline;\n\n  .has-selected-vegetables & {\n    color: ${(props: ThemeProps) => props.theme.colors.gray};\n    text-decoration: none;\n  }\n`;\n\nconst VegetableLabelText = styled(LabelText)`\n  color: ${(props: ThemeProps) => props.theme.colors.gray};\n  text-decoration: none;\n\n  .has-selected-vegetables & {\n    color: ${(props: ThemeProps) => props.theme.colors.veggieGreen};\n    text-decoration: underline;\n  }\n`;\n\nconst Switch = styled.div`\n  margin-left: 16px;\n  width: 80px;\n  height: 48px;\n  background: #bababa;\n  border-radius: 24px;\n  padding: 8px;\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst SwitchIcon = styled.div`\n  position: relative;\n  left: 0;\n  height: 32px;\n  transition: left 1s ease-in-out;\n\n  .has-selected-vegetables & {\n    left: 32px;\n  }\n`;\n\nconst Product: React.FC = () => {\n  const dispatch = useDispatch();\n  const type = useSelector(selectType);\n\n  return (\n    <Theme>\n      <Fieldset>\n        <Wrapper\n          className={\n            type === ProductType.Vegetable ? \"has-selected-vegetables\" : \"\"\n          }\n        >\n          <Legend>Tipo de produto</Legend>\n          <Input\n            type=\"radio\"\n            name=\"productType\"\n            id=\"productType-fruit\"\n            value=\"fruit\"\n            onChange={() => dispatch(setType(ProductType.Fruit))}\n            checked={type === ProductType.Fruit}\n          />\n          <FruitLabel htmlFor=\"productType-fruit\">\n            <LeftLabelText>Frutas</LeftLabelText>\n            <Switch>\n              <SwitchIcon>\n                <div hidden={type === ProductType.Vegetable}>\n                  <FruitSVG />\n                </div>\n                <div hidden={type === ProductType.Fruit}>\n                  <VegetableSVG />\n                </div>\n              </SwitchIcon>\n            </Switch>\n          </FruitLabel>\n          <Input\n            type=\"radio\"\n            name=\"productType\"\n            id=\"productType-vegetable\"\n            value=\"vegetable\"\n            onChange={() => dispatch(setType(ProductType.Vegetable))}\n            checked={type === ProductType.Vegetable}\n          />\n          <VegetableLabel htmlFor=\"productType-vegetable\">\n            <VegetableLabelText>Legumes</VegetableLabelText>\n          </VegetableLabel>\n        </Wrapper>\n      </Fieldset>\n    </Theme>\n  );\n};\n\nexport default Product;\n","import React from \"react\";\nimport \"./App.css\";\nimport FruitsInSeason from \"./components/FruitsInSeason\";\nimport ProductTypeSelector from \"./components/ProductTypeSelector\";\n\nfunction App() {\n  return (\n    <>\n      <FruitsInSeason />\n      <ProductTypeSelector />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\n\nimport productReducer from \"./features/products/slice\";\n\nconst rootReducer = combineReducers({\n  products: productReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ApolloProvider,\n  InMemoryCache,\n  createHttpLink,\n  ApolloClient,\n} from \"@apollo/client\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: process.env.REACT_APP_API_URL,\n  }),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}