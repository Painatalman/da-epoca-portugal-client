{"version":3,"sources":["serviceWorker.ts","generated/graphql.tsx","features/products/slice.ts","components/FruitsInSeason/Theme.tsx","components/FruitsInSeason/FruitsInSeasonSection.tsx","components/FruitsInSeason/index.tsx","App.tsx","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ProductType","CacheControlScope","GetProductsInSeasonDocument","gql","slice","createSlice","name","initialState","products","reducers","fetchProducts","state","action","payload","actions","selectProducts","theme","colors","fruityOrange","gray","grayDark","grayLight","white","fonts","default","fontSizes","small","medium","large","spacing","1","2","3","4","5","6","Theme","children","Section","styled","section","props","LaunchList","useSelector","map","product","i","key","alt","src","photo","baseOptions","dispatch","useDispatch","Apollo","data","error","loading","getProductsInSeason","FruitsInSeasonSection","App","FruitsInSeason","rootReducer","combineReducers","productReducer","store","configureStore","reducer","client","ApolloClient","link","createHttpLink","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCAMC,EAsCAC,E,2MAtCAD,K,cAAAA,E,uBAAAA,M,cAsCAC,K,gBAAAA,E,mBAAAA,M,KAkBL,IAAMC,EAA8BC,cAAH,K,YC1D3BC,EAAQC,YAAY,CAC/BC,KAAM,WACNC,aAVyB,CACzBC,SAAU,IAUVC,SAAU,CACRC,cARkF,SAACC,EAAOC,GAC5FD,EAAMH,SAAWI,EAAOC,YAYxBH,EACEN,EAAMU,QADRJ,cAGWK,EAAiB,SAACJ,GAC7B,OAAOA,EAAMP,EAAME,MAAME,UAGZJ,IAAf,Q,gBC7BMY,EAAQ,CACZC,OAAQ,CACNC,aAAc,UACdC,KAAM,UACNC,SAAU,UACVC,UAAW,UACXC,MAAO,WAETC,MAAO,CACLC,QAAS,eAEXC,UAAW,CACTC,MAAO,OACPC,OAAQ,UACRC,MAAO,QAETC,QAAS,CACPC,EAAG,SACHC,EAAG,OACHC,EAAG,SACHC,EAAG,OACHC,EAAG,SACHC,EAAG,SAUQC,EAJD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,kBAAC,IAAD,CAAerB,MAAOA,GAAQqB,I,8sBCpBhC,IAAMC,EAAUC,IAAOC,QAAV,KAME,SAACC,GAAD,OAAsBA,EAAMzB,MAAMa,QAAQ,MAE1C,SAACY,GAAD,OAAsBA,EAAMzB,MAAMS,UAAUE,UAW3C,SAACc,GAAD,OAAsBA,EAAMzB,MAAMa,QAAQ,MAiBzC,SAACY,GAAD,OAAsBA,EAAMzB,MAAMS,UAAUC,SAK5C,SAACe,GAAD,OAAsBA,EAAMzB,MAAMS,UAAUE,UAwB9Ce,EApBc,WAC3B,IAAMlC,EAA4BmC,YAAY5B,GAE9C,OAAO,gBAAC,EAAD,KAAO,gBAACuB,EAAD,KACZ,kDACA,0BACI9B,EAASoC,KACP,SAACC,EAASC,GAAV,OACI,sBAAIC,IAAKD,GACP,uBACEE,IAAI,GACJC,IAAKJ,EAAQK,OAAS,8BAExB,8BAASL,EAAQvC,cC9DhB,aACb,IJ2FwC6C,EI3FlCC,EAAWC,cADE,EJ6FRC,WAA6EpD,EAA6BiD,GI3F7GI,EAFW,EAEXA,KAAMC,EAFK,EAELA,MAGd,OALmB,EAEEC,QAIZ,2CAGLD,IAAUD,EACL,uCAGTH,EAAS1C,EAAc6C,EAAKG,sBAErB,kBAACC,EAAD,QCbIC,MANf,WACE,OACE,kBAACC,EAAD,O,QCFEC,EAAcC,YAAgB,CAClCvD,SAAUwD,IAUGC,EAPDC,YAAe,CAC3BC,QAASL,ICALM,EAAS,IAAIC,eAAa,CAC9BC,KAAMC,yBAAe,CACnBC,IAAK,gDAEPC,MAAO,IAAIC,kBAGbC,IAASC,OACP,kBAAC,IAAD,CAAUX,MAAOA,GACjB,kBAAC,iBAAD,CAAgBG,OAAQA,GACtB,kBAAC,EAAD,QAGFS,SAASC,eAAe,SRqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.96a2f8db.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** Number for a half of a month, from 1 to 24. Ex.: 3 = 1st half february, 20 = 2nd half of october */\n  HalfMonth: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport enum ProductType {\n  Fruit = 'FRUIT',\n  Vegetable = 'VEGETABLE'\n}\n\nexport type Product = {\n  __typename?: 'Product';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  name_en?: Maybe<Scalars['String']>;\n  photo?: Maybe<Scalars['String']>;\n  type: ProductType;\n  halfMonths: Array<Scalars['HalfMonth']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  products: Array<Product>;\n  getProductsInSeason: Array<Product>;\n  getProductSeasons: Array<Scalars['HalfMonth']>;\n  isInSeason: Scalars['Boolean'];\n};\n\n\nexport type QueryGetProductsInSeasonArgs = {\n  type?: Maybe<ProductType>;\n};\n\n\nexport type QueryGetProductSeasonsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryIsInSeasonArgs = {\n  productId: Scalars['ID'];\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type GetProductsInSeasonQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsInSeasonQuery = (\n  { __typename?: 'Query' }\n  & { getProductsInSeason: Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'name' | 'name_en' | 'type' | 'photo'>\n  )> }\n);\n\n\nexport const GetProductsInSeasonDocument = gql`\n    query getProductsInSeason {\n  getProductsInSeason {\n    name\n    name_en\n    type\n    photo\n  }\n}\n    `;\n\n/**\n * __useGetProductsInSeasonQuery__\n *\n * To run a query within a React component, call `useGetProductsInSeasonQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsInSeasonQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsInSeasonQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsInSeasonQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>) {\n        return Apollo.useQuery<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>(GetProductsInSeasonDocument, baseOptions);\n      }\nexport function useGetProductsInSeasonLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>(GetProductsInSeasonDocument, baseOptions);\n        }\nexport type GetProductsInSeasonQueryHookResult = ReturnType<typeof useGetProductsInSeasonQuery>;\nexport type GetProductsInSeasonLazyQueryHookResult = ReturnType<typeof useGetProductsInSeasonLazyQuery>;\nexport type GetProductsInSeasonQueryResult = Apollo.QueryResult<GetProductsInSeasonQuery, GetProductsInSeasonQueryVariables>;","import { RootState } from '../../store';\nimport { PartialProduct } from './types';\nimport { CaseReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ntype State = {\n  products: PartialProduct[]\n}\n\nconst initialState:State = {\n  products: [],\n};\n\nconst fetchProductsCaseReducer: CaseReducer<State, PayloadAction<PartialProduct[]>> = (state, action) => {\n  state.products = action.payload\n}\n\nexport const slice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    fetchProducts: fetchProductsCaseReducer\n  }\n});\n\nexport const {\n  fetchProducts\n} = slice.actions;\n\nexport const selectProducts = (state:RootState) => {\n  return state[slice.name].products;\n};\n\nexport default slice.reducer;\n","import React, { ReactElement } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nconst theme = {\n  colors: {\n    fruityOrange: \"#ED7014\",\n    gray: \"#707070\",\n    grayDark: '#222222',\n    grayLight: \"#BABABA\",\n    white: \"#FFFFFF\",\n  },\n  fonts: {\n    default: 'Fredoka One'\n  },\n  fontSizes: {\n    small: \"1rem\",\n    medium: \"1.25rem\",\n    large: \"2rem\"\n  },\n  spacing: {\n    1: '0.5rem',\n    2: '1rem',\n    3: '1.5rem',\n    4: '2rem',\n    5: '2.5rem',\n    6: '3rem',\n  }\n};\n\nexport type ThemeType = typeof theme\n\nconst Theme = ({ children }:{children:React.ReactNode}) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import * as React from 'react';\n\nimport { selectProducts } from '../../features/products/slice';\nimport {useSelector } from 'react-redux'\nimport { PartialProduct } from '../../features/products/types';\nimport styled from 'styled-components'\nimport Theme, {ThemeType} from './Theme'\n\ntype ThemeProps = {\n  theme: ThemeType\n}\n\nconst Section = styled.section`\n  box-sizing: border-box;\n  margin: auto;\n  width: 100%;\n  min-width: 360px;\n  max-width: 480px;\n  padding: 0 ${(props:ThemeProps) => props.theme.spacing[2]};\n\n  font-size: ${(props:ThemeProps) => props.theme.fontSizes.medium};\n  font-family: Fredoka One;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  ul {\n    list-style-type: none;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: ${(props:ThemeProps) => props.theme.spacing[2]};\n    padding: 0;\n  }\n\n  li {\n    text-align: center;\n  }\n\n  li img {\n    max-width: 100%;\n    width: 100%;\n    border-radius: 8px;\n  }\n\n  strong {\n    text-transform: capitalize;\n    font-weight: normal;\n    font-size: ${(props:ThemeProps) => props.theme.fontSizes.small};\n  }\n\n  h1, h2 {\n    font-weight: normal;\n    font-size: ${(props:ThemeProps) => props.theme.fontSizes.medium};\n  }\n`\n\nconst LaunchList: React.FC = () => {\n  const products:PartialProduct[] = useSelector(selectProducts)\n  \n  return <Theme><Section> \n    <h1>Produtos da Época</h1>\n    <ul>\n      { products.map(\n          (product, i) => \n              <li key={i}>\n                <img \n                  alt=\"\" \n                  src={product.photo || \"http://placehold.it/80/80\"} \n                />\n                <strong>{product.name}</strong>\n              </li>\n        )}\n    </ul>\n  </Section></Theme>\n};\n\nexport default LaunchList;\n","import React from 'react';\n\nimport { useGetProductsInSeasonQuery } from '../../generated/graphql'\nimport FruitsInSeasonSection from './FruitsInSeasonSection'\nimport { useDispatch } from 'react-redux';\nimport { fetchProducts } from '../../features/products/slice';\n\n\n  export default () => {\n    const dispatch = useDispatch()\n    const { data, error, loading } = useGetProductsInSeasonQuery();\n    \n    \n    if (loading) {\n      return <div>Loading...</div>;\n    }\n  \n    if (error || !data) {\n      return <div>ERROR</div>;\n    }\n\n    dispatch(fetchProducts(data.getProductsInSeason))\n  \n    return <FruitsInSeasonSection />;\n  };\n  ","import React from 'react';\nimport './App.css';\nimport FruitsInSeason from './components/FruitsInSeason';\n\nfunction App() {\n  return (\n    <FruitsInSeason />\n  );\n}\n\nexport default App;\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\n\nimport productReducer from './features/products/slice';\n\nconst rootReducer = combineReducers({\n  products: productReducer\n});\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider, InMemoryCache, createHttpLink, ApolloClient } from '@apollo/client';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: 'http://da-epoca-portugal-api.herokuapp.com/'\n  }),\n  cache: new InMemoryCache() \n});\n\nReactDOM.render(\n  <Provider store={store}>\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n  \n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}